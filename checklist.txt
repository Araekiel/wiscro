To-Do:
[✓] 1. Write ajax call for no buttons
[✓] 2. Refactor code in userPage.js 
[✓] 3. Refactor code in authRoute.js, getRoute.js, postRoute.js - check the data and error that are being sent as the reponse to requests
    [✓] 1. authRoute.js 
        *Need to fix a few things with findOne code [✓]
    [✓] 2. getRoute.js
        *Except /myques and /myans - See item 7
    [✓] 3. postRoute.js
[✓] 4. Modulate the frontend js after refactoring
    *Except guesPage.js - see 8 and 9
[✓] 5. Change/Add comments in refactored code
[✓] 6. Solve Problem 2
[✓] 7. Solve Problem 3
[✓] 8. Change the status of questions from 'active' and 'inactive' to true and false
[✓] 9. Write Endpoints and ajax calls for 'My Questions' and 'My Answers'
[✓] 10. Refactor code from line 62 to 121 in public/js/userPage/main.js and anything below line 127 if possible
[✓] 11. Form the innerHTML strings on the server-side instead of the client-side
[X] 12. Complete guestPage.js - Write endpoints and frontend code with ajax calls
[X] 13. Refactor and Modulate code in guestPage.js based on /userPage 
    *'Try the app' was redundant for a prototype 
[✓] 14. Handle Errors and Messages - Use a custom snackbar on the frontend
    [✓] 1. Add code on the frontend to handle errors and messages returned in ajax calls
    [✓] 2. Change the backend code for modals and errors(sending errors in ressponse), Complete the frontend code on every page - modals, dialog boxes, and finishing touches
        *Check the status code of the responses and change them if necessary
        *Change error messages sent in responses
    [✓] 3. Add error handling in the backend, handle failed ajax requests
    [✓] 4. Change error handling in the frontend of registerPage based on loginPage
    [✓] 5. Change login and register requests in loginPage and registerPage from form submits to ajax requests
    [✓] 6. Refactor loginPage.js and registerPage.js
    [✓] 7. Add comments to the code that was changed
[✓] 15. Display a message if there is no data to show on the pages of userPage
[✓] 16. Use async await on the backend and userPage.js
[✓] 17. Make 404 and Forbidden views
[✓] 18. Refactor code one last time
[] 19. Solve Problem 4
[] 20. Remove redundant code and comments
[] 21. Add KSSBro to the app and a section showing details of the app(About section)
[] 22. Change the fav icon
[✓] 23. Write README
[] 24. Deploy on Heroku

Problems: 
[✓] 1. Check if when an answer is submited and perYes and perNo are calculated the new ans is acknowledged or not
[✓] 2. Need to check the time for which every question has been 'active' at regular intervals to change the 'status' to 'inactive' if required.
    - Check node-schedule nom module for this task or setInterval js function
    - Look into Date Class and now() method and Manipulation of the time returned by the function
[✓] 3. When questions are submitted by a user the question is not added to the questions list of the user
[] 4. The Dup key bug 
[] 5. What if two people submit an answer for the same question at the same time.
 

[✓]For To-Do item 2: In userPage.hbs change the classnames 'user-question-yes' and 'user-question-no' or add a new 
classname 'user-auestion-ans-button' to all the buttons then create an array of all the buttons, the specifics 
that differentiate the yes and no buttons can be stored in data attributes.
[X]For To-Do item 3 Sub-item 2: Tried using every() method on userAnswers list in the /feedques endpoint to form
the finalQuestions list but every() method test whether every element in an array passes the test in the function 
but filter requires a flag(boolean) to be returned for each element in the array

Improvements: 
[] 1. Use token(JSON web tokens) authentication instead of sessions and store data on the client-side instead of putting load on the server-side
[] 2. Make ajax requests to /feedques, /myques and /myans together right when the user logs in and add a way to refresh the data
[] 3. Add OAuth
[] 4. Can add trialPage back later on
[] 5. Unlimited scrolling for answer page
[] 5. Read this - https://engineering.linkedin.com/nodejs/blazing-fast-nodejs-10-performance-tips-linkedin-mobile#client-side 